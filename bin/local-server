#!perl
use strict;
use warnings;
use Path::Tiny;
use lib glob path (__FILE__)->parent->parent->child ('t_deps/modules/promised-*/lib');
use AnyEvent;
use Promise;
use Promised::File;
use Promised::Plackup;
use Promised::Mysqld;
use Promised::Command::Signals;
use JSON::PS;

$ENV{SQL_DEBUG} //= 1;
$ENV{WEBUA_DEBUG} //= 1;

my $root_path = path (__FILE__)->parent->parent->absolute;
my $config_path = $root_path->child ('local/local-server/config/config.json');
my $config_file = Promised::File->new_from_path ($config_path);

my $main_cv = AE::cv;

my $mysqld = Promised::Mysqld->new;
my $plackup = Promised::Plackup->new;

my $done = sub {
  return Promise->all ([$plackup->stop, $mysqld->stop]);
};
Promised::Command::Signals->add_handler (INT => $done);
Promised::Command::Signals->add_handler (TERM => $done);

my $db_dir = $root_path->child ('local/local-server/mysql');
$db_dir->mkpath;
$mysqld->set_db_dir ($db_dir);
$mysqld->start->then (sub {
  my $dsn = $mysqld->get_dsn_string (dbname => 'straw_devel2');
  return Promise->all ([
    Promised::File->new_from_path ($root_path->child ('db/straw.sql'))->read_byte_string->then (sub {
      return [grep { length } split /;/, $_[0]];
    })->then (sub {
      $mysqld->create_db_and_execute_sqls (straw_test => $_[0]);
    }),
    Promised::File->new_from_path ($root_path->child ('db/straw-procedures.sql'))->read_byte_string->then (sub {
      return [grep { length } split /^\@\@\@\@$/m, $_[0]];
    })->then (sub {
      $mysqld->create_db_and_execute_sqls (straw_test => $_[0]);
    }),
    $config_file->write_byte_string (perl2json_bytes {
      alt_dsns => {master => {straw => $dsn}},
      dsns => {straw => $dsn},
    }),
  ]);
})->then (sub {
  $plackup->envs->{APP_CONFIG} = $config_path;
  $plackup->plackup ($root_path->child ('plackup'));
  $plackup->set_option ('--app' => $root_path->child ('bin/server.psgi'));
  $plackup->set_option ('--host' => 0);
  $plackup->set_option ('--port' => 5150);
  $plackup->set_server ('Twiggy');
  return $plackup->start;
})->catch (sub {
  my $error = $_[0];
  AE::log alert => "$error";
  return Promise->resolve->then ($done)->then (sub {
    $main_cv->croak;
  });
});

$main_cv->recv;
