#!perl
use strict;
use warnings;
use Path::Tiny;
use lib glob path (__FILE__)->parent->parent->child ('t_deps/modules/promised-*/lib');
use Promise;
use Promised::File;
use Promised::Mysqld;
use Promised::Command;
use Promised::Command::Signals;
use JSON::PS;

$ENV{SQL_DEBUG} //= 1;
$ENV{WEBUA_DEBUG} //= 1;
$ENV{WEBSERVER_DEBUG} //= 1;
$ENV{STRAW_WORKER_INTERVAL} //= 5;

my $root_path = path (__FILE__)->parent->parent->absolute;
my $config_path = $root_path->child ('local/local-server/config/config.json');
my $config_file = Promised::File->new_from_path ($config_path);

my $mysqld = Promised::Mysqld->new;
my $sarze_server = Promised::Command->new
    ([$root_path->child ('perl'),
      $root_path->child ('bin/sarze-server.pl'),
      5150]);
$sarze_server->propagate_signal (1);

my $db_dir = $root_path->child ('local/local-server/mysql');
$db_dir->mkpath;
$mysqld->set_db_dir ($db_dir);
$mysqld->start->then (sub {
  my $dsn = $mysqld->get_dsn_string (dbname => 'straw_test');
  return Promise->all ([
    Promised::File->new_from_path ($root_path->child ('db/straw.sql'))->read_byte_string->then (sub {
      return [grep { length } split /;/, $_[0]];
    })->then (sub {
      $mysqld->create_db_and_execute_sqls (straw_test => $_[0]);
    }),
    Promised::File->new_from_path ($root_path->child ('db/straw-procedures.sql'))->read_byte_string->then (sub {
      return [grep { length } split /^\@\@\@\@$/m, $_[0]];
    })->then (sub {
# XXX run if not exists
#      $mysqld->create_db_and_execute_sqls (straw_test => $_[0]);
    }),
    $config_file->write_byte_string (perl2json_bytes {
      alt_dsns => {master => {straw => $dsn}},
      dsns => {straw => $dsn},
      api_key => 'local',
    }),
  ]);
})->then (sub {
  $sarze_server->envs->{APP_CONFIG} = $config_path;
  return $sarze_server->run->then (sub {
    return $sarze_server->wait;
  });
})->catch (sub {
  my $error = $_[0];
  warn "$$: Error: $error\n";
})->to_cv->recv;

$mysqld->stop->to_cv->recv;
